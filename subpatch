#!/usr/bin/python

from StringIO import StringIO
from glob import glob
import logging
import os
import re
import subprocess
import sys
import tempfile
import shutil

PY2 = sys.version_info[0] == 2
if PY2:
    import ConfigParser
else:
    from configparser import ConfigParser


logging.basicConfig(format='%(levelname)s: %(message)s', level=logging.INFO)
log = logging.getLogger()


def git(*args):
    """ Run a git shell command, optionally returning the output """
    args = ('git',) + args
    log.info('+ ' + ' '.join(args))
    return subprocess.check_output(args)


def main(argv):
    try:
        parent_range = argv[1]
    except IndexError:
        raise SystemExit('specify a Git range to diff')

    changes = set()
    for line in git('diff', '--submodule=log', parent_range).split("\n"):
        if line.startswith('Submodule '):
            changes.add(line)

    # Example values for changes:
    #   Submodule src/civetweb 8d27131...47e4be1 (not checked out)
    #   Submodule src/civetweb 8d27131..47e4be1:

    if len(changes) == 0:
        raise SystemExit('no submodule changes found')

    log.info('Found these submodule changes:')
    log.info("\n".join(changes))

    if len(changes) > 1:
        raise SystemExit('cannot handle more than one submodule change')

    change = next(iter(changes))
    m = re.match('Submodule (\S+) (\S+)', change)
    if not m:
        raise RuntimeError('error parsing change output "%s"' % change)
    directory = m.group(1)
    rng = m.group(2)

    if rng.endswith(':'):
        rng = rng[:-1]

    # format-patch will generate uneeded patches if we use the triple-dot
    # "..." range. Switch to using the double-dot ".." range.
    rng = rng.replace('...', '..')

    log.info('range %s in directory %s' % (directory, rng))

    first, _ = parent_range.split('..')
    # To be able to stay on the dist-git branch:
    # (or having to run git submodule update $DIR):
    # 1. Parse `git show $FIRST:.gitmodules` with Python's ConfigParser
    # 2. Get the URL for $DIR and (bare?) clone it to a tmpdir
    # 3. `git format-patch ...` within that tmpdir clone
    # 4. profit
    show = git('show', first + ':.gitmodules')
    showfp = StringIO("\n".join(line.strip() for line in show.split("\n")))
    config = ConfigParser.ConfigParser()
    config.readfp(showfp)
    url = config.get('submodule "%s"' % directory, 'url')
    tmpclonedir = tempfile.mkdtemp(suffix='.subpatch')
    git('clone', '--bare', url, tmpclonedir)
    origcwd = os.getcwd()

    # format-patches from this tmp clone
    os.chdir(tmpclonedir)
    tmppatchdir = tempfile.mkdtemp(suffix='.subpatch')
    git('format-patch', '--no-renames', '--no-signature', '-N',
        '--ignore-submodules', '-o', tmppatchdir, rng)

    print('')
    print('Insert the following lines into your .spec file:')
    print('')

    os.chdir(tmppatchdir)
    shutil.rmtree(tmpclonedir)
    sourcenum = 100
    print('With the other "SourceX" lines:')
    print('')
    for patch in sorted(glob('*.patch')):
        sourcenum += 1
        print('Source%i: %s' % (sourcenum, os.path.basename(patch)))

    print('')
    print('...and in the %prep section of your .spec file:')
    print('')
    print('# submodule patches must be handled separately')
    print('# https://github.com/redhat-openstack/rdopkg/issues/16')

    print('pushd %s' % directory)
    sourcenum = 100
    for patch in sorted(glob('*.patch')):
        sourcenum += 1
        print('  patch -p1 --fuzz=0 -i %%{SOURCE%i}' % sourcenum)
        shutil.move(patch, origcwd)
    print('popd')

    shutil.rmtree(tmppatchdir)


if __name__ == '__main__':
    main(sys.argv)
